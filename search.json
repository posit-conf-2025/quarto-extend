[
  {
    "objectID": "slides/03-filters.html#what-are-filters-1",
    "href": "slides/03-filters.html#what-are-filters-1",
    "title": "Filters and Shortcodes",
    "section": "What are filters?",
    "text": "What are filters?\n\nFilters manipulate the AST between the parsing and the writing phase. First, understand the AST.\n\n\nhttps://pandoc.org/lua-filters.html"
  },
  {
    "objectID": "slides/03-filters.html#ast-a-document-is-composed-of-blocks",
    "href": "slides/03-filters.html#ast-a-document-is-composed-of-blocks",
    "title": "Filters and Shortcodes",
    "section": "AST: A document is composed of Blocks",
    "text": "AST: A document is composed of Blocks\n\n\n\n\nexample.qmd\n\nI **really** like bold and *really* like italics, and *really **really*** can't decide which to use.\n\n:::{.shout}\nAnd sometimes I **really** need to shout!\n\nIt's like I want to `toupper()` everything!\n:::\n\n\n\n\n\nDive into the AST in increasing level of detail.\nA document is composed of a series of blocks.\nIn the AST diagram, blocks stack vertically.\nAt the top-level this document has a Para block followed by a Div block.\nSome blocks can contain other blocks, like this Div contains two Para blocks."
  },
  {
    "objectID": "slides/03-filters.html#ast-some-blocks-contain-other-blocks",
    "href": "slides/03-filters.html#ast-some-blocks-contain-other-blocks",
    "title": "Filters and Shortcodes",
    "section": "AST: Some Blocks contain other Blocks",
    "text": "AST: Some Blocks contain other Blocks\n\n\n\n\nexample.qmd\n\nI **really** like bold and *really* like italics, and *really **really*** can't decide which to use.\n\n:::{.shout}\nAnd sometimes I **really** need to shout!\n\nIt's like I want to `toupper()` everything!\n:::"
  },
  {
    "objectID": "slides/03-filters.html#ast-some-blocks-contain-inlines",
    "href": "slides/03-filters.html#ast-some-blocks-contain-inlines",
    "title": "Filters and Shortcodes",
    "section": "AST: Some Blocks contain Inlines",
    "text": "AST: Some Blocks contain Inlines\n\n\n\n\nexample.qmd\n\nI **really** like bold and *really* like italics, and *really **really*** can't decide which to use.\n\n...\n\n\n\n\n\nBlocks can also contain Inlines.\nIn the AST diagram, inlines flow horizontally.\nThis first Para block contains a series of Inline elements.\nThe most basic are Str and Space.\nInlines can also contain other inlines. E.g. a Strong that contains a single Str, an Emph that contains a Str, Space and Strong.\nStr and Space can’t contain anything else, so are often collapsed in diagrams."
  },
  {
    "objectID": "slides/03-filters.html#ast-diagrams-might-collapse-str-and-space",
    "href": "slides/03-filters.html#ast-diagrams-might-collapse-str-and-space",
    "title": "Filters and Shortcodes",
    "section": "AST: Diagrams might collapse Str and Space",
    "text": "AST: Diagrams might collapse Str and Space\n\n\n\n\nexample.qmd\n\nI **really** like bold and *really* like italics, and *really **really*** can't decide which to use.\n\n:::{.shout}\nAnd sometimes I **really** need to shout!\n\nIt's like I want to `toupper()` everything!\n:::\n\n\n\n\n\nWhy is this useful?\n\nTo offer new output formats, Pandoc just needs a writer that converts the AST to that format.\nWe can describe transformations of the document in a format independent way."
  },
  {
    "objectID": "slides/03-filters.html#a-filter-function-transforms-a-type-of-node",
    "href": "slides/03-filters.html#a-filter-function-transforms-a-type-of-node",
    "title": "Filters and Shortcodes",
    "section": "A filter function transforms a type of node",
    "text": "A filter function transforms a type of node\nE.g. A Strong filter function\n\n\n\n\n\n\n\n\n\n\n\n→\n\n\n\n\n\n\n\nA function called on every instance of that type of node\nThe input to the function is the node itself\nThe output of the function replaces the node"
  },
  {
    "objectID": "slides/03-filters.html#output-a-single-node-of-the-same-kind",
    "href": "slides/03-filters.html#output-a-single-node-of-the-same-kind",
    "title": "Filters and Shortcodes",
    "section": "Output: a single node of the same kind",
    "text": "Output: a single node of the same kind\nE.g. A single Inline. Node is replaced."
  },
  {
    "objectID": "slides/03-filters.html#output-an-array-of-nodes-of-the-same-kind",
    "href": "slides/03-filters.html#output-an-array-of-nodes-of-the-same-kind",
    "title": "Filters and Shortcodes",
    "section": "Output: an array of nodes of the same kind",
    "text": "Output: an array of nodes of the same kind\nE.g. An array of Inline, a.k.a an Inlines. Spliced in."
  },
  {
    "objectID": "slides/03-filters.html#output-an-empty-array",
    "href": "slides/03-filters.html#output-an-empty-array",
    "title": "Filters and Shortcodes",
    "section": "Output: an empty array",
    "text": "Output: an empty array\nNode is removed"
  },
  {
    "objectID": "slides/03-filters.html#output-nil",
    "href": "slides/03-filters.html#output-nil",
    "title": "Filters and Shortcodes",
    "section": "Output: nil",
    "text": "Output: nil\nNode is unchanged"
  },
  {
    "objectID": "slides/03-filters.html#ast-and-filter-review",
    "href": "slides/03-filters.html#ast-and-filter-review",
    "title": "Filters and Shortcodes",
    "section": "AST and filter review",
    "text": "AST and filter review\n\nA document is an array of Block elements\nSome Block elements contain other Block elements\nSome Block elements contain Inline elements\nSome Inline elements contain other Inline elements\n\nA filter function is called on every instance of a particular type of node.\nThe input is the node itself, the output replaces the node."
  },
  {
    "objectID": "slides/03-filters.html#your-turn-ast",
    "href": "slides/03-filters.html#your-turn-ast",
    "title": "Filters and Shortcodes",
    "section": "Your turn: AST",
    "text": "Your turn: AST\n\nTake a look at the AST diagram on the next slide.\n\nWhat are some other types of Block nodes?\nWhat are some other types of Inline nodes?\nIf we wrote a filter for Para, how many times would it be called?\nIf we wrote a filter for Str, which of the following would be affected?\n\nThe text Filter in the title\nThe text Introduction in the heading\nThe text Lua in the link text\nThe text lua-filters in the link URL\nthe text quarto in the code block\n\n\n\n\n  \n    −\n    +\n \n 06:00\n \n\nExercise: 03-filters/your-turns/1-explore-ast"
  },
  {
    "objectID": "slides/03-filters.html#ast",
    "href": "slides/03-filters.html#ast",
    "title": "Filters and Shortcodes",
    "section": "AST",
    "text": "AST\nView Full Screen"
  },
  {
    "objectID": "slides/03-filters.html#problems-solved-with-filters",
    "href": "slides/03-filters.html#problems-solved-with-filters",
    "title": "Filters and Shortcodes",
    "section": "Problems solved with filters",
    "text": "Problems solved with filters\n\nRemove # fmt: skip comments from code cells. Discussion\nNumber all callouts. Discussion\nPut the contents of an SVG image in a raw HTML block rather than using &lt;img&gt;. Discussion\nDisplay the language on every code cell. Discussion\nCollect all code chunks and display in a code appendix. Discussion"
  },
  {
    "objectID": "slides/03-filters.html#writing-filters-1",
    "href": "slides/03-filters.html#writing-filters-1",
    "title": "Filters and Shortcodes",
    "section": "Writing filters",
    "text": "Writing filters\nFilters are written in the programming language Lua.\nA filter is a Lua file that contains one or more filter functions.\nA filter function is a function whose name is a type of node."
  },
  {
    "objectID": "slides/03-filters.html#a-filter-function-on-strong-nodes",
    "href": "slides/03-filters.html#a-filter-function-on-strong-nodes",
    "title": "Filters and Shortcodes",
    "section": "A filter function on Strong nodes",
    "text": "A filter function on Strong nodes\n\n\nDefine a function named Strong:\n\n\nno-change.lua\n\nStrong = function(el)\n  return nil\nend\n\n\nTo use the filter, specify it in the document header:\n\n\nexample.qmd\n\n---\ntitle: \"Filter Basics\"\nfilters:\n  - no-change.lua\n---\n\n\nA filter function that returns nil, leaves the node unchanged.\n\nExample: 03-filters/examples/1-writing-filters"
  },
  {
    "objectID": "slides/03-filters.html#live-code-print-debugging",
    "href": "slides/03-filters.html#live-code-print-debugging",
    "title": "Filters and Shortcodes",
    "section": "Live Code: “Print” debugging",
    "text": "Live Code: “Print” debugging\n\n\n\n\nno-change.lua\n\nStrong = function(el)\n  quarto.log.output(\"Here!\")\n  quarto.log.output(el)\n  return nil\nend\n\nquarto.log.output(): Positron/VS Code look in Terminal, RStudio look in Background Jobs.\n\n\nStrong filter function is called twice.\nel is an Strong object, an example of an Inline.\nel contains a content field which is an Inlines."
  },
  {
    "objectID": "slides/03-filters.html#live-code-replace-bold-text-with-italic-text",
    "href": "slides/03-filters.html#live-code-replace-bold-text-with-italic-text",
    "title": "Filters and Shortcodes",
    "section": "Live Code: Replace bold text with italic text",
    "text": "Live Code: Replace bold text with italic text\n\n\n\n\nreplace-strong.lua\n\nStrong = function(el)\n  return pandoc.Emph(el.content)\nend\n\n\n\npandoc.Emph() creates a Emph node another example of an Inline node.\nel.content gets the content field from the el object."
  },
  {
    "objectID": "slides/03-filters.html#other-similar-types-of-inline-elements",
    "href": "slides/03-filters.html#other-similar-types-of-inline-elements",
    "title": "Filters and Shortcodes",
    "section": "Other similar types of Inline elements",
    "text": "Other similar types of Inline elements\nSee Pandoc Lua types Quick Reference"
  },
  {
    "objectID": "slides/03-filters.html#your-turn-write-a-filter",
    "href": "slides/03-filters.html#your-turn-write-a-filter",
    "title": "Filters and Shortcodes",
    "section": "Your turn: Write a filter",
    "text": "Your turn: Write a filter\n\n\nWrite a filter, replace-emph.lua, that turns all italic text to underlined text.\nAdd the Strong filter function from replace-strong.lua to replace-emph.lua. What happens?\n\nOther challenges:\n\nWrite a filter that removes all bold and italic formatting, leaving just the text.\nWrite a filter that converts all double quotes to single quotes.\n\n\n\n  \n    −\n    +\n \n 10:00\n \n\nExercise: 03-filters/your-turns/2-write-a-filter"
  },
  {
    "objectID": "slides/03-filters.html#valid-return-values",
    "href": "slides/03-filters.html#valid-return-values",
    "title": "Filters and Shortcodes",
    "section": "Valid return values",
    "text": "Valid return values\nA filter on an Inline must return either:\n\nnil, node is unchanged, e.g. no-change.lua\nan Inline which replaces the original, e.g. replace-strong.lua\na list of Inline (known as an Inlines) which replaces the original, spliced into its siblings.\n\n\n\nFor Block elements, replace Inline with Block, and Inlines with Blocks."
  },
  {
    "objectID": "slides/03-filters.html#an-inlines-with-three-elements",
    "href": "slides/03-filters.html#an-inlines-with-three-elements",
    "title": "Filters and Shortcodes",
    "section": "An Inlines with three elements",
    "text": "An Inlines with three elements\n\n\n\n\ndouble-strong.lua\n\nStrong = function(el)\n  return pandoc.Inlines({\n    el, \n    pandoc.Space(), \n    el\n  })\nend\n\n\n\nI really really like bold and really like italics, and really really really can’t decide which to use.\n\n\n\nExample: 03-filters/examples/2-return-types"
  },
  {
    "objectID": "slides/03-filters.html#an-empty-list",
    "href": "slides/03-filters.html#an-empty-list",
    "title": "Filters and Shortcodes",
    "section": "An empty list",
    "text": "An empty list\n\n\n\n\nremove-strong.lua\n\nStrong = function(el)\n  return {}\nend\n\n\n\nI really like bold and like italics, and can’t decide which to use.\n\n\n\nExample: 03-filters/examples/2-return-types"
  },
  {
    "objectID": "slides/03-filters.html#common-mistake-an-array-of-inlines",
    "href": "slides/03-filters.html#common-mistake-an-array-of-inlines",
    "title": "Filters and Shortcodes",
    "section": "Common mistake: an array of Inlines",
    "text": "Common mistake: an array of Inlines\nThis won’t work because el.content is an Inlines object:\nreturn pandoc.Inlines({el.content, el.content})\n \nError running filter /Applications/quarto/share/filters/main.lua:\nInline expected, got Inlines\nSee a useful pattern in the next section."
  },
  {
    "objectID": "slides/03-filters.html#live-code-targeting-specific-content",
    "href": "slides/03-filters.html#live-code-targeting-specific-content",
    "title": "Filters and Shortcodes",
    "section": "Live Code: Targeting specific content",
    "text": "Live Code: Targeting specific content\n\n\n\n\ntarget-span.qmd\n\n---\ntitle: \"Filter Basics\"\nfilters:\n  - shout.lua\n---\n\nI **really** like bold and *really* like italics, and *really **really*** can't decide which to use.\n\n[And sometimes I **really** need to shout]{.shout}\n\n\n\n\n\nExample: 03-filters/examples/3-target-text"
  },
  {
    "objectID": "slides/03-filters.html#live-code-smallcaps-all-spans-with-class-shout",
    "href": "slides/03-filters.html#live-code-smallcaps-all-spans-with-class-shout",
    "title": "Filters and Shortcodes",
    "section": "Live Code: Smallcaps all spans with class shout",
    "text": "Live Code: Smallcaps all spans with class shout\n\n\n\n\nshout.lua\n\nSpan = function(el)\n  if el.classes:includes(\"shout\") then\n    return pandoc.SmallCaps(el.content)\n  end  \nend\n\n\n\nClasses are in el.classes (also el.identifier and el.attributes).\nincludes() is a method on Pandoc lists.\n\n\n\nExample: 03-filters/examples/3-target-text"
  },
  {
    "objectID": "slides/03-filters.html#live-code-constructing-content",
    "href": "slides/03-filters.html#live-code-constructing-content",
    "title": "Filters and Shortcodes",
    "section": "Live Code: Constructing content",
    "text": "Live Code: Constructing content\n\n\n\n\nshout.lua\n\nSpan = function(el)\n  if el.classes:includes(\"shout\") then\n    local result = pandoc.Inlines({})\n    result:extend(el.content)\n    result:insert(pandoc.Str(\"!\"))\n    return result\n  end  \nend\n\n\nA useful pattern:\n\nCreate an empty Inlines object\nUse extend() to add Inlines\nUse insert() to add Inline\n\n\n\n\nWorks with Block/Blocks too."
  },
  {
    "objectID": "slides/03-filters.html#your-turn-simon-says",
    "href": "slides/03-filters.html#your-turn-simon-says",
    "title": "Filters and Shortcodes",
    "section": "Your turn: Simon says",
    "text": "Your turn: Simon says\n\nComplete says.lua, a filter that:\n\ntargets Span elements with class says, and\nturns them into “Simon says” instructions.\n\n\n\nE.g. source:\n\n\nBefore\n\n[Write a filter]{.says}\n\n\nBecomes equivalent to:\n\n\nAfter\n\nSimon says \"Write a filter\"\n\n\nChallenge: Instead of Simon, let the user specify the name as an attribute, e.g. [Write a filter]{.says name=\"Charlotte\"}\n\n\n  \n    −\n    +\n \n 10:00\n \n\nExercise: 03-filters/your-turns/3-simon-says"
  },
  {
    "objectID": "slides/03-filters.html#target-content-in-a-div",
    "href": "slides/03-filters.html#target-content-in-a-div",
    "title": "Filters and Shortcodes",
    "section": "Target content in a div",
    "text": "Target content in a div\n\n\n\n\ntarget-div.qmd\n\n---\ntitle: \"Filter Basics\"\nfilters:\n  - shout.lua\n---\n\n::: {.shout}\nAnd sometimes I **really** need to shout\n\n```r\nlibrary(scream)\n```\n:::\n\n\n\n\nshout.lua\n\nDiv = function(el)\n  if not el.classes:includes(\"shout\") then\n    return nil\n  end\n  local result = pandoc.Blocks({})\n  -- Transform el, construct result\n  return result \nend\n\n\n\nExample: 03-filters/examples/4-filters-in-practice/1-target-content-in-div"
  },
  {
    "objectID": "slides/03-filters.html#use-walk-to-apply-filter-functions-to-children",
    "href": "slides/03-filters.html#use-walk-to-apply-filter-functions-to-children",
    "title": "Filters and Shortcodes",
    "section": "Use walk to apply filter functions to children",
    "text": "Use walk to apply filter functions to children\n\n\n\n\ntarget-div.qmd\n\n---\ntitle: \"Filter Basics\"\nfilters:\n  - shout.lua\n---\n\n::: {.shout}\nAnd sometimes I **really** need to shout\n\n```r\nlibrary(scream)\n```\n:::\n\n\n\n\nshout.lua\n\nDiv = function(el)\n  if not el.classes:includes(\"shout\") then\n    return nil\n  end\n  result = el:walk({\n    Str = function (el) \n      -- filter function on Str\n    end\n  })\n  return result.content\nend\n\n\n\nExample: 03-filters/examples/4-filters-in-practice/2-walk-children-nodes\n\n\n\nhttps://pandoc.org/lua-filters.html#type-pandoc:walk"
  },
  {
    "objectID": "slides/03-filters.html#construct-format-specific-output",
    "href": "slides/03-filters.html#construct-format-specific-output",
    "title": "Filters and Shortcodes",
    "section": "Construct format specific output",
    "text": "Construct format specific output\n\n\n\n\nexample.qmd\n\n---\ntitle: \"Format-Specific Output\"\nformat: pdf\nfilters:\n  - shout.lua\n---\n\n::: {.shout}\nAnd sometimes I **really** need to shout\n\n```r\nlibrary(scream)\n```\n:::\n\n\n\n\nshout.lua\n\nDiv = function(el)\n  if not el.classes:includes(\"shout\") then\n    return nil\n  end\n\n  if quarto.format.is_latex_output() then\n    local result = pandoc.Blocks({})\n    -- use `pandoc.RawBlock('latex', )`\n    return result\n  end\n  \nend\n\n\n\nExample: 03-filters/examples/4-filters-in-practice/3-format-specific-output"
  },
  {
    "objectID": "slides/03-filters.html#filter-function-on-meta-to-examine-metadata",
    "href": "slides/03-filters.html#filter-function-on-meta-to-examine-metadata",
    "title": "Filters and Shortcodes",
    "section": "Filter function on Meta to examine metadata",
    "text": "Filter function on Meta to examine metadata\n\n\n\n\narticle.qmd\n\n---\nauthor:\n  - name: Mine Çetinkaya-Rundel\n    orcid: 0000-0001-6452-2420\n    email: mine@posit.co\n    affiliations:\n      - name: Duke University\n      - name: Posit, PBC\n  - name: Charlotte Wickham\n    orcid: 0000-0002-6365-5499\n    email: charlotte.wickham@posit.co\n    affiliation:\n      - name: Posit, PBC\n---\n\n\n\n\nmeta.lua\n\nMeta = function(meta)\n  quarto.log.output(meta)\nend\n\n\n\nExample: 03-filters/examples/4-filters-in-practice/4-meta-filter"
  },
  {
    "objectID": "slides/03-filters.html#controlling-the-order-of-filter-functions",
    "href": "slides/03-filters.html#controlling-the-order-of-filter-functions",
    "title": "Filters and Shortcodes",
    "section": "Controlling the order of filter functions",
    "text": "Controlling the order of filter functions\n\n\nFilter functions in the same filter are run in a specific order: Inline elements, Inlines(), Block elements, Blocks(), Meta(), Pandoc().\nSpecify a different order by returning an array of filter sets.\n\n\n\nmeta.lua\n\nlocal string_out = \"\"\nreturn {\n  { -- this set is run first\n    Meta = function (meta)\n      -- store `string_out`\n    end\n  },\n  { -- this set is run second\n    Div = function(el)\n      -- use `string_out`\n    end\n  }\n}\n\n\n\nExample: 03-filters/examples/4-filters-in-practice/5-filter-sets"
  },
  {
    "objectID": "slides/03-filters.html#controlling-when-a-filter-runs",
    "href": "slides/03-filters.html#controlling-when-a-filter-runs",
    "title": "Filters and Shortcodes",
    "section": "Controlling when a filter runs",
    "text": "Controlling when a filter runs\n\n\nQuarto’s internal filters are grouped and run in sequence: ast, quarto, render.\nBy default, custom filters are run pre-quarto.\nYou might need to run a filter later, e.g. after quarto has processed cross-references.\n\nYou can specify with at e.g:\n\n\nexample.qmd\n\nfilters:\n  - at: post-quarto\n    path: shout.lua\n\nAlso pre-ast, post-ast, pre-render, post-render\n\n\n\nFilter sequence in source: https://github.com/quarto-dev/quarto-cli/blob/main/src/resources/filters/main.lua"
  },
  {
    "objectID": "slides/03-filters.html#filter-extensions",
    "href": "slides/03-filters.html#filter-extensions",
    "title": "Filters and Shortcodes",
    "section": "Filter extensions",
    "text": "Filter extensions\nquarto create extension filter creates boilerplate. Drop your .lua files in.\n\n\n\n\nshout/\n\n├── README.md\n├── _extensions\n│   └── shout\n│       ├── _extension.yml\n│       └── shout.lua\n└── example.qmd\n\n\n\n\n_extension.yml\n\ntitle: Shout\nauthor: Charlotte Wickham\nversion: 1.0.0\nquarto-required: \"&gt;=1.7.0\"\ncontributes:\n  filters:\n    - shout.lua\n\n\nUsers must opt-in to extension under filters:\n\n\nexample.qmd\n\n---\nfilters:\n  - shout\n---\n\n\n\nhttps://quarto.org/docs/extensions/filters.html#filter-extensions"
  },
  {
    "objectID": "slides/03-filters.html#filters-in-custom-format-extensions",
    "href": "slides/03-filters.html#filters-in-custom-format-extensions",
    "title": "Filters and Shortcodes",
    "section": "Filters in custom format extensions",
    "text": "Filters in custom format extensions\n\n\n\n\nshouty/\n\n├── README.md\n├── _extensions\n│   └── shouty\n│       ├── _extension.yml\n│       └── shout.lua\n└── template.qmd\n\n\n\n\n_extension.yml\n\ntitle: Shouty\nauthor: Charlotte Wickham\nversion: 1.0.0\nquarto-required: \"&gt;=1.7.0\"\ncontributes:\n  formats:\n    html:\n      filters:\n        - shout.lua\n\n\nUsers specify format: shouty-html, and get filter applied automatically."
  },
  {
    "objectID": "slides/03-filters.html#shortcodes",
    "href": "slides/03-filters.html#shortcodes",
    "title": "Filters and Shortcodes",
    "section": "Shortcodes",
    "text": "Shortcodes\nLua functions that insert their output into the AST.\n\n\n\n\nhello.qmd\n\n---\nshortcodes:\n  - hello.lua\n---\n\n{{&lt; hello &gt;}}\n\n\n\n\nhello.lua\n\nhello = function ()\n  return pandoc.Str(\"Hi there!\")\nend\n\n\nCan take arguments: args, kwargs, meta, raw_args, context\n\n\nhttps://quarto.org/docs/extensions/shortcodes.html"
  },
  {
    "objectID": "slides/03-filters.html#learning-lua",
    "href": "slides/03-filters.html#learning-lua",
    "title": "Filters and Shortcodes",
    "section": "Learning Lua",
    "text": "Learning Lua\nhttps://quarto.org/docs/extensions/lua.html#learning-lua\n\nI also quite liked: https://ebens.me/posts/lua-for-programmers-part-1/"
  },
  {
    "objectID": "slides/03-filters.html#section",
    "href": "slides/03-filters.html#section",
    "title": "Filters and Shortcodes",
    "section": "",
    "text": "AST diagrams are WIP\n\n\nThe AST diagrams you’ve seen are produced using Pandoc’s version of markdown.\nQuarto specific features won’t appear in the AST diagrams as you might expect. E.g. cross-references, executable code blocks (ones with {), shortcodes, callouts, etc..\nUse quarto.log.output() to examine the AST as it is when your filter is run.\nThis will improve!"
  },
  {
    "objectID": "slides/04-case-study.html#a-case-study-course-notes",
    "href": "slides/04-case-study.html#a-case-study-course-notes",
    "title": "Case study",
    "section": "A case study: Course notes",
    "text": "A case study: Course notes\nNotes that we want as slides (format: revealjs) and a document (format: html).\n\n\n\n\nTitle slide in every slide deck controlled by metadata\n\n\n\nPartial\n\n\n\n\n\nSpecial slide combines boilerplate with content.\n\n\n\nFilter"
  },
  {
    "objectID": "slides/04-case-study.html#your-turn-add-a-filter",
    "href": "slides/04-case-study.html#your-turn-add-a-filter",
    "title": "Case study",
    "section": "Your turn: Add a filter",
    "text": "Your turn: Add a filter\n\n\n\nWrite the participate.lua filter to combine the content of the question in the div with class .participate with boilerplate text:\nAnswer in our Discord!\n\nYour slide should look like this:\n\n\nHints:\n\nRecall the useful pattern: create an empty pandoc.Blocks(), insert Blocks, extend with Blocks.\nYou can pass pandoc.Str() a string with spaces.\n\n\n\nExercise: 04-case-study/your-turns/1-add-filter\n\n\n  \n    −\n    +\n \n 08:00"
  },
  {
    "objectID": "slides/04-case-study.html#your-turn-predict-the-output",
    "href": "slides/04-case-study.html#your-turn-predict-the-output",
    "title": "Case study",
    "section": "Your turn: Predict the output",
    "text": "Your turn: Predict the output\n\nTake a look at the version of participate.lua on the next slide.\nWith your neighbor, predict what the “Participate” slide will look like.\n\n\n  \n    −\n    +\n \n 05:00"
  },
  {
    "objectID": "slides/04-case-study.html#participate.lua",
    "href": "slides/04-case-study.html#participate.lua",
    "title": "Case study",
    "section": "participate.lua",
    "text": "participate.lua\n\nFull Screen\n\n\nparticipate.lua\n\nlocal function column(width)\n  return pandoc.Attr(\"\", {'column'}, {width=width})\nend \n\nDiv = function(el)\n  if not el.classes:includes(\"participate\") then\n    return nil\n  end\n\n  local content = pandoc.Div(el.content, pandoc.Attr(\"\", {'question'}, {}))\n\n  if not quarto.format.isHtmlSlideOutput() then\n    return content\n  end\n\n  local boilerplate = pandoc.Para(pandoc.Inlines({\n    pandoc.Image(\n      \"\",\n      \"Discord-Logo-Black.png\", \n      nil, \n      pandoc.Attr(\"\", {}, {alt=\"Discord Logo\"})\n    ),\n    pandoc.Str(\"Answer in our \"),\n    pandoc.Link(\n      pandoc.Str(\"Discord\"), \n      pandoc.utils.stringify(quarto.metadata.get(\"discord\")))\n  }))\n  \n  local inner_columns = pandoc.Blocks({\n    pandoc.Div(content, column('75%')), \n    pandoc.Div(boilerplate, column('25%'))\n  })\n  local result = pandoc.Div(inner_columns, pandoc.Attr(\"\", {\"columns\"}, {}))\n  return result\nend"
  },
  {
    "objectID": "slides/04-case-study.html#your-turn-now-add-a-partial",
    "href": "slides/04-case-study.html#your-turn-now-add-a-partial",
    "title": "Case study",
    "section": "Your turn: Now add a partial!",
    "text": "Your turn: Now add a partial!\n\nTake what you developed so far in this module and add your title-slide.html partial and slides.scss theme from earlier."
  },
  {
    "objectID": "slides/04-case-study.html#bring-it-all-together",
    "href": "slides/04-case-study.html#bring-it-all-together",
    "title": "Case study",
    "section": "Bring it all together",
    "text": "Bring it all together\n\nExample: 04-case-study/example"
  },
  {
    "objectID": "slides/04-case-study.html#bring-it-all-together-1",
    "href": "slides/04-case-study.html#bring-it-all-together-1",
    "title": "Case study",
    "section": "Bring it all together…",
    "text": "Bring it all together…\nas an extension!\n\nExample: 04-case-study/coursenotes"
  },
  {
    "objectID": "slides/04-case-study.html#reusable-components",
    "href": "slides/04-case-study.html#reusable-components",
    "title": "Case study",
    "section": "Reusable components",
    "text": "Reusable components\n\n{{&lt; include &gt;}}s are a convenient way to reuse content across documents\n\nThe same content\nBasically copy-paste\n\ntemplate-partials are a way to create reusable components\n\nThe same structure, but different content\nCopy-paste with substitutions from meta-data fields\n\nShortcodes are like copy-paste with substitutions in the body of your document\nfilters are a way to modify content\n\nThe same structure, but different content\nOperating on the document content\n\n_extensions are combinations of partials and filters, and possibly other things, that are designed for portability and reusability"
  },
  {
    "objectID": "slides/04-case-study.html#workshop-survey",
    "href": "slides/04-case-study.html#workshop-survey",
    "title": "Case study",
    "section": "Workshop survey",
    "text": "Workshop survey\nBefore we move on to Q&A, please take a note of the workshop survey:\n\n\n pos.it/conf-workshop-survey"
  },
  {
    "objectID": "slides/04-case-study.html#questions",
    "href": "slides/04-case-study.html#questions",
    "title": "Case study",
    "section": "Questions?",
    "text": "Questions?\nAny questions, but especially of the kind:\n\nHow can I solve _my problem_ with a filter, partial, etc.?\nDo I need a filter or partial or something else for solving _my problem_?"
  },
  {
    "objectID": "resources/participate.html",
    "href": "resources/participate.html",
    "title": "participate.lua",
    "section": "",
    "text": "participate.lua\n\nlocal function column(width)\n  return pandoc.Attr(\"\", {'column'}, {width=width})\nend \n\nDiv = function(el)\n  if not el.classes:includes(\"participate\") then\n    return nil\n  end\n\n  local content = pandoc.Div(el.content, pandoc.Attr(\"\", {'question'}, {}))\n\n  if not quarto.format.isHtmlSlideOutput() then\n    return content\n  end\n\n  local boilerplate = pandoc.Para(pandoc.Inlines({\n    pandoc.Image(\n      \"\",\n      \"Discord-Logo-Black.png\", \n      nil, \n      pandoc.Attr(\"\", {}, {alt=\"Discord Logo\"})\n    ),\n    pandoc.Str(\"Answer in our \"),\n    pandoc.Link(\n      pandoc.Str(\"Discord\"), \n      pandoc.utils.stringify(quarto.metadata.get(\"discord\")))\n  }))\n  \n  local inner_columns = pandoc.Blocks({\n    pandoc.Div(content, column('75%')), \n    pandoc.Div(boilerplate, column('25%'))\n  })\n  local result = pandoc.Div(inner_columns, pandoc.Attr(\"\", {\"columns\"}, {}))\n  return result\nend"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Extending Quarto Workshop",
    "section": "",
    "text": "Sep 16th, 2025\nposit::conf(2025)",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "Extending Quarto Workshop",
    "section": "Setup",
    "text": "Setup\nPlease check the Setup Instructions for recommended steps to take before the workshop.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "Extending Quarto Workshop",
    "section": "Schedule",
    "text": "Schedule\n\n\n\nTime\nActivity\n\n\n\n\n09:00 - 10:30\nExtension Basics\n\n\n10:30 - 11:00\nCoffee break\n\n\n11:00 - 12:30\nPartials\n\n\n12:30 - 13:30\nLunch break\n\n\n13:30 - 15:00\nFilters and Shortcodes\n\n\n15:00 - 15:30\nCoffee break\n\n\n15:30 - 17:00\nCase Study",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#instructors",
    "href": "index.html#instructors",
    "title": "Extending Quarto Workshop",
    "section": "Instructors",
    "text": "Instructors\nMine Çetinkaya-Rundel is Professor of the Practice and the Director of Undergraduate Studies at the Department of Statistical Science and Developer Educator at Posit, PBC. Mine’s work focuses on innovation in statistics and data science pedagogy, with an emphasis on computing, reproducible research, student-centered learning, and open-source education.  \nCharlotte Wickham (she/her) is a Developer Educator on the Developer Relations team at Posit with a focus on Quarto. Prior to Posit, she taught Statistics and Data Science at Oregon State University where she received awards for her in-person and online teaching.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#description",
    "href": "index.html#description",
    "title": "Extending Quarto Workshop",
    "section": "Description",
    "text": "Description\nIn this workshop, we will dive deep into ways of customizing your Quarto outputs with tooling beyond built-in features. This workshop is designed for data scientists, analysts, and technical writers looking to extend Quarto’s capabilities to suit their unique workflows better.\nParticipants will learn how to create custom extensions, including new formats, templates, and filters, to enhance their document production process. Through hands-on exercises and real-world examples, you’ll gain practical skills in:\n\nDeveloping and integrating custom formats to support diverse outputs while reducing repetition across projects.\nSubstituting Quarto’s templates with your own to customize formats beyond the built-in options.\nImplementing filters to automate and streamline content transformation.\n\nBy the end of the workshop, you will be able to leverage Quarto’s extensibility to create powerful, tailored solutions for your documentation needs. Whether you have just worked on a few Quarto projects or are an everyday user, this workshop will equip you with the tools and knowledge to take your document workflows to the next level.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Extending Quarto Workshop",
    "section": "License",
    "text": "License\nThis work is licensed under a Creative Commons Attribution 4.0 International License.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setup",
    "section": "",
    "text": "Quarto 1.8\nWe’ll rely on some of the latest features of Quarto, so please ensure you have v1.8 installed. Download at: https://quarto.org/docs/download/prerelease/\nPositron, VS Code or RStudio\nWe’ll be live-coding in Positron, but we recognize that you probably already have an IDE you like to use with Quarto. If that IDE is one of Positron, VS Code or RStudio, stick with it. For Positron and VS Code ensure you have the Quarto (OpenVSX or MS Marketplace) and Lua (OpenVSX or MS Marketplace) extensions.\nIf you use another IDE, be prepared to preview Quarto documents (.qmd), use the integrated terminal, and open and edit .tex, .html, and .lua files. You might consider installing Positron as a backup in case you have trouble following along from your IDE.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "setup.html#software-requirements",
    "href": "setup.html#software-requirements",
    "title": "Setup",
    "section": "",
    "text": "Quarto 1.8\nWe’ll rely on some of the latest features of Quarto, so please ensure you have v1.8 installed. Download at: https://quarto.org/docs/download/prerelease/\nPositron, VS Code or RStudio\nWe’ll be live-coding in Positron, but we recognize that you probably already have an IDE you like to use with Quarto. If that IDE is one of Positron, VS Code or RStudio, stick with it. For Positron and VS Code ensure you have the Quarto (OpenVSX or MS Marketplace) and Lua (OpenVSX or MS Marketplace) extensions.\nIf you use another IDE, be prepared to preview Quarto documents (.qmd), use the integrated terminal, and open and edit .tex, .html, and .lua files. You might consider installing Positron as a backup in case you have trouble following along from your IDE.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "modules/01-basics.html",
    "href": "modules/01-basics.html",
    "title": "Extension Basics",
    "section": "",
    "text": "Open slides in fullscreen",
    "crumbs": [
      "Modules",
      "Extension Basics"
    ]
  },
  {
    "objectID": "modules/01-basics.html#learning-objectives",
    "href": "modules/01-basics.html#learning-objectives",
    "title": "Extension Basics",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nBy the end of this module, you will be able to:\n\nDiscover and install extensions\nCompare and contrast the structure of the raw source and installed source for a Quarto extension\nDescribe the types of extensions you can build\nCreate an custom format extension that sets format metadata",
    "crumbs": [
      "Modules",
      "Extension Basics"
    ]
  },
  {
    "objectID": "modules/01-basics.html#links",
    "href": "modules/01-basics.html#links",
    "title": "Extension Basics",
    "section": "Links",
    "text": "Links\n\nGet exercises: https://github.com/posit-conf-2025/quarto-extend-exercises",
    "crumbs": [
      "Modules",
      "Extension Basics"
    ]
  },
  {
    "objectID": "modules/02-partials.html",
    "href": "modules/02-partials.html",
    "title": "Partials",
    "section": "",
    "text": "Open slides in fullscreen",
    "crumbs": [
      "Modules",
      "Partials"
    ]
  },
  {
    "objectID": "modules/02-partials.html#learning-objectives",
    "href": "modules/02-partials.html#learning-objectives",
    "title": "Partials",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nBy the end of this module, you will be able to:\n\nExplain the role of template partials in Quarto documents and how they differ from full template overrides.\nLocate and reference partial files in an existing Quarto template.\nCustomize a template partial to change the appearance or content of specific sections without affecting the entire template.",
    "crumbs": [
      "Modules",
      "Partials"
    ]
  },
  {
    "objectID": "modules/02-partials.html#links",
    "href": "modules/02-partials.html#links",
    "title": "Partials",
    "section": "Links",
    "text": "Links\n\nTemplate partials",
    "crumbs": [
      "Modules",
      "Partials"
    ]
  },
  {
    "objectID": "modules/04-case-study.html",
    "href": "modules/04-case-study.html",
    "title": "Case Study",
    "section": "",
    "text": "Open slides in fullscreen",
    "crumbs": [
      "Modules",
      "Case Study"
    ]
  },
  {
    "objectID": "modules/03-filters.html",
    "href": "modules/03-filters.html",
    "title": "Filters and Shortcodes",
    "section": "",
    "text": "Open slides in fullscreen",
    "crumbs": [
      "Modules",
      "Filters and Shortcodes"
    ]
  },
  {
    "objectID": "modules/03-filters.html#learning-objectives",
    "href": "modules/03-filters.html#learning-objectives",
    "title": "Filters and Shortcodes",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nBy the end of this module, you will be able to:\n\nDescribe how Pandoc filters modify the Abstract Syntax Tree (AST)\nWrite a simple Pandoc filter for an Inline element\nLocate documentation for Lua modules provided by Pandoc and Quarto\nUse spans or divs to target specific content for a filter\nSpecify an order to apply filters\nDescribe how shortcodes modify the AST\nPackage a filter as a Quarto extension",
    "crumbs": [
      "Modules",
      "Filters and Shortcodes"
    ]
  },
  {
    "objectID": "modules/03-filters.html#links",
    "href": "modules/03-filters.html#links",
    "title": "Filters and Shortcodes",
    "section": "Links",
    "text": "Links\n\nPositron/VS Code Lua extension: OpenVSX or MS Marketplace\nPandoc Lua types Quick Reference",
    "crumbs": [
      "Modules",
      "Filters and Shortcodes"
    ]
  },
  {
    "objectID": "LICENSE.html#creative-commons-attribution-sharealike-4.0-international-public-license",
    "href": "LICENSE.html#creative-commons-attribution-sharealike-4.0-international-public-license",
    "title": "Attribution-ShareAlike 4.0 International",
    "section": "Creative Commons Attribution-ShareAlike 4.0 International Public License",
    "text": "Creative Commons Attribution-ShareAlike 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nA. reproduce and Share the Licensed Material, in whole or in part; and\nB. produce, reproduce, and Share Adapted Material.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nA. Offer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nB. __Additional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\nC. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\nA. retain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nB. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nC. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\n\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.t stated herein are separate from and independent of the terms and conditions of this Public License.\n\n\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org"
  },
  {
    "objectID": "quick-reference.html",
    "href": "quick-reference.html",
    "title": "Pandoc Types Quick Reference",
    "section": "",
    "text": "General Notes\n  Document Structure\n  Block Elements\n  \n  Paragraphs and Headings\n  Lists\n  Code and raw blocks\n  Divs, BlockQuotes, Figures\n  Other\n  \n  Inline Elements\n  \n  Whitespace\n  Basic Elements\n  Text Formatting\n  Other"
  },
  {
    "objectID": "quick-reference.html#general-notes",
    "href": "quick-reference.html#general-notes",
    "title": "Pandoc Types Quick Reference",
    "section": "General Notes",
    "text": "General Notes\n\nMost common elements are listed here, but not all.\nQuarto has some custom node types too: Callout, Tabset, ConditionalBlock, FloatRefTarget\nThe syntax [, arg] indicates an optional argument\nAll types have a t/tag field to access the type as a string (e.g. pandoc.Space().t returns Space)\nAny type with the attr field also has shortcuts for: identifier, classes, and attributes\nattr is an Attr object. Create one with pandoc.Attr():\npandoc.Attr(\n  \"my-id\",                       --identifier\n  {\"class-one\", \"class-two\"},    --classes\n  {key=\"value\", key2=\"value2\"}   --attributes\n)"
  },
  {
    "objectID": "quick-reference.html#document-structure",
    "href": "quick-reference.html#document-structure",
    "title": "Pandoc Types Quick Reference",
    "section": "Document Structure",
    "text": "Document Structure\n\n\n\n\n\n\n\n\nType\nConstructor\nFields\n\n\n\n\nPandoc\npandoc.Pandoc(blocks, meta)\nblocks, meta\n\n\nMeta\npandoc.Meta(table)\nkey-value pairs of document metadata"
  },
  {
    "objectID": "quick-reference.html#block-elements",
    "href": "quick-reference.html#block-elements",
    "title": "Pandoc Types Quick Reference",
    "section": "Block Elements",
    "text": "Block Elements\n\nParagraphs and Headings\ncontent is an Inlines object (a list of Inline elements)\n\n\n\n\n\n\n\n\nType\nConstructor\nFields\n\n\n\n\nPara\npandoc.Para(content)  content: Inlines\ncontent\n\n\nPlain\npandoc.Plain(content)  content: Inlines\ncontent\n\n\nHeader\npandoc.Header (level, content[, attr]))  content: Inlines level: integer\nlevel, content, attr\n\n\n\n\n\nLists\ncontent is a list of Blocks, or for DefinitionList something complicated.\n\n\n\n\n\n\n\n\nType\nConstructor\nFields\n\n\n\n\nBulletList\npandoc.BulletList(items)  items: {Blocks, ... }\ncontent\n\n\nOrderedList\npandoc.OrderedList(items[, listAttributes])  items: {Blocks, ... }\ncontent, listAttributes, start, style, delimiter\n\n\nDefinitionList\npandoc.DefinitionList(content)  content: {Inlines, {Blocks, ...}, ...}\ncontent (list of definition pairs)\n\n\n\n\n\nCode and raw blocks\ntext is a simple Lua string (not a Str)\n\n\n\n\n\n\n\n\nType\nConstructor\nFields\n\n\n\n\nCodeBlock\npandoc.CodeBlock(text[, attr])  text: string\ntext, attr\n\n\nRawBlock\npandoc.RawBlock(format, text)  text: string\nformat, text\n\n\n\n\n\nDivs, BlockQuotes, Figures\ncontent is a Blocks object (a list of Block elements)\n\n\n\n\n\n\n\n\nType\nConstructor\nFields\n\n\n\n\nDiv\npandoc.Div(content[, attr])  content: Blocks\ncontent, attr\n\n\nBlockQuote\npandoc.BlockQuote(content)  content: Blocks\ncontent\n\n\nFigure\npandoc.Figure(content[, caption[, attr]])  content: Blocks\ncontent, caption, attr\n\n\n\n\n\nOther\n\n\n\n\n\n\n\n\nType\nConstructor\nFields\n\n\n\n\nTable\npandoc.Table(caption, colspecs, head, bodies, foot[, attr])\ncaption, colspecs, head, bodies, foot, attr\n\n\nLineBlock\npandoc.LineBlock(content)  content: {Inlines, ...}\ncontent"
  },
  {
    "objectID": "quick-reference.html#inline-elements",
    "href": "quick-reference.html#inline-elements",
    "title": "Pandoc Types Quick Reference",
    "section": "Inline Elements",
    "text": "Inline Elements\n\nWhitespace\nTakes no arguments, has no fields.\n\n\n\n\n\n\n\nType\nConstructor\n\n\n\n\nSpace\npandoc.Space()\n\n\nSoftBreak\npandoc.SoftBreak()\n\n\nLineBreak\npandoc.LineBreak()\n\n\n\n\n\nBasic Elements\ntext is a simple Lua string (not a Str)\n\n\n\n\n\n\n\n\nType\nConstructor\nFields\n\n\n\n\nStr\npandoc.Str(text)\ntext\n\n\nCode\npandoc.Code(code[, attr])\ntext, attr\n\n\nMath\npandoc.Math(mathtype, text)  mathtype: 'InlineMath' or 'DisplayMath'\nmathtype, text\n\n\nRawInline\npandoc.RawInline(format, text)  format: 'html', 'latex' etc.\nformat, text\n\n\n\n\n\nText Formatting\ncontent is an Inlines object (a list of Inline elements).\n\n\n\n\n\n\n\n\nType\nConstructor\nFields\n\n\n\n\nEmph\npandoc.Emph(content)\ncontent\n\n\nSmallCaps\npandoc.SmallCaps(content)\ncontent\n\n\nStrikeout\npandoc.Strikeout(content)\ncontent\n\n\nStrong\npandoc.Strong(content)\ncontent\n\n\nSubscript\npandoc.Subscript(content)\ncontent\n\n\nSuperscript\npandoc.Superscript(content)\ncontent\n\n\nUnderline\npandoc.Underline(content)\ncontent\n\n\nQuoted\npandoc.Quoted(quotetype, content)  quotetype: 'SingleQuote' or 'DoubleQuote'\nquotetype, content\n\n\n\n\n\nOther\ncontent and title are Inlines unless otherwise noted.\nsrc, target are simple Lua strings.\nattr is an Attr object.\n\n\n\n\n\n\n\n\nType\nConstructor\nFields\n\n\n\n\nSpan\npandoc.Span(content[, attr])\ncontent, attr\n\n\nImage\npandoc.Image(caption, src[, title[, attr]])\ncaption, src, title, attr\n\n\nLink\npandoc.Link(content, target[, title[, attr]])\ncontent, target, title, attr\n\n\n\n\n\n\n\nCite\npandoc.Cite(content, citations)\ncontent, citations\n\n\nNote\npandoc.Note(content)  content: Blocks\ncontent"
  },
  {
    "objectID": "slides/02-partials.html#templates",
    "href": "slides/02-partials.html#templates",
    "title": "Partials",
    "section": "Templates",
    "text": "Templates\n\nQuarto uses Pandoc templates to generate the rendered output from a markdown file.\nA Pandoc template is a mix of format specific content and variables, and the variables are replaced with their values from a rendered document\nProvide your custom template for complete control of the final output:\n\nformat:\n  pdf:\n    template-partials:\n      - mytemplate.tex"
  },
  {
    "objectID": "slides/02-partials.html#example-basic-latex-template",
    "href": "slides/02-partials.html#example-basic-latex-template",
    "title": "Partials",
    "section": "Example: Basic LaTeX template",
    "text": "Example: Basic LaTeX template\n\n\nInput:\n\n\narticle.qmd\n\nHello **world**!\n\n\nTemplate:\n\n\nmytemplate.tex\n\n\\documentclass{scrartcl}\n\\begin{document}\n$body$\n\\end{document}\n\n\nOutput:\n\n\narticle.tex\n\n\\documentclass{scrartcl}\n\\begin{document}\nHello \\textbf{world}!\n\\end{document}\n\n$body$ replaced with LaTeX generated from body of document"
  },
  {
    "objectID": "slides/02-partials.html#full-or-partial",
    "href": "slides/02-partials.html#full-or-partial",
    "title": "Partials",
    "section": "Full or partial?",
    "text": "Full or partial?\n\nReplacing an entire template offers full control of output but comes with the risk of omitting required variables that can break Pandoc/Quarto features.\nSafer approaches:\n\nSelectively replace partials that exist within the master LaTeX or HTML template\nReplace the entire LaTeX or HTML template, but then include partials provided with Quarto to ensure that your template takes advantage of all Pandoc and Quarto features"
  },
  {
    "objectID": "slides/02-partials.html#replacing-partials",
    "href": "slides/02-partials.html#replacing-partials",
    "title": "Partials",
    "section": "Replacing partials",
    "text": "Replacing partials\n\nQuarto provides built in templates that are composed of a set of partial template files for LaTeX / PDF and HTML output\nYou can replace portions of Quarto’s built in template which allows you to customize just a portion of the template without needing to replace it entirely\n\nA simple partial to provide custom handling of the document title in LaTeX looks like:"
  },
  {
    "objectID": "slides/02-partials.html#example-basic-latex-partial",
    "href": "slides/02-partials.html#example-basic-latex-partial",
    "title": "Partials",
    "section": "Example: Basic LaTeX partial",
    "text": "Example: Basic LaTeX partial\nWhen using a partial for modifying the title in LaTeX, Quarto will use the built in template but replace the title portion of the template with the provided partial:\n\n\nPartial:\n\n\ntitle.text\n\n\\title{$title$}\n\\author{$for(author)$$author$$sep$ \\and $endfor$}\n\\date{$date$}\n\n\nUsage:\nformat:\n  pdf:\n    template-partials:\n      - title.tex\n$body$ replaced with LaTeX generated from body of document"
  },
  {
    "objectID": "slides/02-partials.html#whats-in-a-name",
    "href": "slides/02-partials.html#whats-in-a-name",
    "title": "Partials",
    "section": "What’s in a name?",
    "text": "What’s in a name?\n\nIn this case, everything!\nThe name of the partial file must match the name of the partial in the built in template that you want to replace.\nProviding an empty file as a partial is a way to opt out of some features without modifying the whole main template."
  },
  {
    "objectID": "slides/02-partials.html#including-partials",
    "href": "slides/02-partials.html#including-partials",
    "title": "Partials",
    "section": "Including partials",
    "text": "Including partials\nUse built in partials when composing your own template, which allows you to include specific features from Quarto and Pandoc without copying and maintaining the entire template code:\n\n\n\n\nmy-template.tex\n\n\\documentclass{scrartcl}\n$pandoc.tex()$  \n\\begin{document}\n$body$          \n\\end{document}  \n\n\n\nUse the $pandoc.tex()$ partial to include pandoc configuration for text highlighting, tables, graphics, tight lists, citations, and header include.\nAdd your custom template for $body$."
  },
  {
    "objectID": "slides/02-partials.html#partials-for-various-formats",
    "href": "slides/02-partials.html#partials-for-various-formats",
    "title": "Partials",
    "section": "Partials for various formats",
    "text": "Partials for various formats\nThey exist!\n\nLaTeX\nBeamer\nTypst\nHTML\nRevealjs\n\n\n\nhttps://quarto.org/docs/journals/templates.html"
  },
  {
    "objectID": "slides/02-partials.html#example-1-a-title-slide",
    "href": "slides/02-partials.html#example-1-a-title-slide",
    "title": "Partials",
    "section": "Example 1: A title slide…",
    "text": "Example 1: A title slide…\nwith plenty of meta data\n\ntitle: The Best Title Ever\nsubtitle: and a mediocre subtitle\nauthor:\n  - name: Mine Çetinkaya-Rundel\n    url: https://mine-cr.com\n    orcid: 0000-0001-6452-2420\n    email: mine@posit.co\n    affiliations:\n      - name: Duke University\n      - name: Posit, PBC\n  - name: Charlotte Wickham\n    url: https://cwick.co.nz\n    orcid: 0000-0002-6365-5499\n    email: charlotte@posit.co\n    affiliation:\n      - name: Posit, PBC\ndate: 2025-09-16\nfooter: \"[pos.it/quarto-extend-conf25](https://pos.it/quarto-extend-conf25)\"\nformat: revealjs\n\n\nExample: 02-filters/examples/1-start-here"
  },
  {
    "objectID": "slides/02-partials.html#your-turn-1-default-title-slide-partial",
    "href": "slides/02-partials.html#your-turn-1-default-title-slide-partial",
    "title": "Partials",
    "section": "Your turn 1: Default title-slide partial",
    "text": "Your turn 1: Default title-slide partial\n\n\nFind the default title-slide.html partial in the Quarto GitHub repo, copy it to your exercise folder, and include it as a template-partial in your YAML.\nRender your slides and observe the difference, or lack thereof!\n\n\n\nExercise: 02-filters/exercises/1-default-title-slide"
  },
  {
    "objectID": "slides/02-partials.html#example-2-modify-date-author-email",
    "href": "slides/02-partials.html#example-2-modify-date-author-email",
    "title": "Partials",
    "section": "Example 2: Modify date & author email",
    "text": "Example 2: Modify date & author email\n\n\n\nMove date to under the subtitle and format it as a 3rd level heading h3.\nAdd an envelope icon next to the email address; e.g., one from https://icon-sets.iconify.design/line-md/?icon-filter=email.\n\n\n\n\n\nExample: 02-filters/examples/2-modify-date-author-email"
  },
  {
    "objectID": "slides/02-partials.html#your-turn-2-modify-orcid",
    "href": "slides/02-partials.html#your-turn-2-modify-orcid",
    "title": "Partials",
    "section": "Your turn 2: Modify ORCID",
    "text": "Your turn 2: Modify ORCID\n\n\n\nModify how the ORCID logo shown to match the color scheme of the title slide; use this one instead: https://icon-sets.iconify.design/simple-icons/?icon-filter=orcid.\n\n\n\n\n\nExercise: 02-filters/your-turn/2-modify-orcid"
  },
  {
    "objectID": "slides/02-partials.html#your-turn-3-modify-affiliations",
    "href": "slides/02-partials.html#your-turn-3-modify-affiliations",
    "title": "Partials",
    "section": "Your turn 3: Modify affiliations",
    "text": "Your turn 3: Modify affiliations\n\n\n\nDisplay multiple affiliations on the same line, separated by +.\n\n\n\n\n\nExercise: 02-filters/your-turn/3-modify-affiliations"
  },
  {
    "objectID": "slides/02-partials.html#your-turn-4-modify-author-url",
    "href": "slides/02-partials.html#your-turn-4-modify-author-url",
    "title": "Partials",
    "section": "Your turn 4: Modify author URL",
    "text": "Your turn 4: Modify author URL\n\n\n\nDisplay author url on the title slide, next to a home icon, e.g., https://icon-sets.iconify.design/line-md/?icon-filter=home.\n\n\n\n\n\nExercise: 02-filters/your-turn/4-modify-author-url"
  },
  {
    "objectID": "slides/02-partials.html#example-3-add-venue",
    "href": "slides/02-partials.html#example-3-add-venue",
    "title": "Partials",
    "section": "Example 3: Add venue",
    "text": "Example 3: Add venue\n\n\nAdd a new field, venue, to the YAML and place it under the date.\n\n\n\n\nExercise: 02-filters/examples/3-add-venue"
  },
  {
    "objectID": "slides/02-partials.html#your-turn-5-add-github-usernames",
    "href": "slides/02-partials.html#your-turn-5-add-github-usernames",
    "title": "Partials",
    "section": "Your turn 5: Add GitHub usernames",
    "text": "Your turn 5: Add GitHub usernames\n\n\n\n\nAdd GitHub usernames to the document YAML with a field called github under author.\nUpdate title-slide.html to place GitHub usernames along with the GitHub logo under affiliations.\n\n\n\n\n\n\nExercise: 02-filters/your-turn/5-add-github"
  },
  {
    "objectID": "slides/02-partials.html#your-turn-6-style",
    "href": "slides/02-partials.html#your-turn-6-style",
    "title": "Partials",
    "section": "Your turn 6: Style",
    "text": "Your turn 6: Style\n\n\n\nMake the title slide match the screenshot in below. Specifically:\n\nMake the title small caps.\nUse handwriting font for the subtitle.\nAdjust font sizes of various fields: date, affiliation, author URL, GitHub username, and email are smaller.\nAdjust font colors: subtitle and affiliations are gray.\n\n\n\n\n\n\nExercise: 02-filters/your-turn/6-style"
  },
  {
    "objectID": "slides/02-partials.html#example-4-move-footer-add-horiz.-line",
    "href": "slides/02-partials.html#example-4-move-footer-add-horiz.-line",
    "title": "Partials",
    "section": "Example 4: Move footer + add horiz. line",
    "text": "Example 4: Move footer + add horiz. line\n\n\n\nRemove the link to slides from footer (using include-after-body) and use that field in the partial to be displayed below the venue.\nDisplay content from footer under venue with a link icon, e.g., https://icon-sets.iconify.design/line-md/?icon-filter=link.\nAdd a horizontal line below the slide URL.\n\n\n\n\n\nExercise: 02-filters/examples/4-hr-footer"
  },
  {
    "objectID": "slides/01-basics.html#extending-quarto-welcome",
    "href": "slides/01-basics.html#extending-quarto-welcome",
    "title": "Extension Basics",
    "section": "Extending Quarto: Welcome!",
    "text": "Extending Quarto: Welcome!\nWifi: Posit Conf 2025 Password: conf2025\n\n\n\nMaterials: pos.it/quarto-extend-conf25\nGet Quarto version 1.8\nDownload exercises: https://github.com/posit-conf-2025/quarto-extend-exercises\nJoin the discord: #workshop-quarto-extend"
  },
  {
    "objectID": "slides/01-basics.html#housekeeping",
    "href": "slides/01-basics.html#housekeeping",
    "title": "Extension Basics",
    "section": "Housekeeping",
    "text": "Housekeeping\n\nGender-neutral bathrooms:\n\nLL1 (Under escalators, to the right of the Learning Center)\nLL2 (Next Chicago A)\n\nMeditation/prayer room: LL2 - Chicago A\nMother’s/lactation room: LL2 - Chicago B\nRed lanyards = No photos\nCode of Conduct: https://posit.co/code-of-conduct. Please review carefully. You can report Code of Conduct violations in person, by email, or by phone. Please see the policy linked above for contact information."
  },
  {
    "objectID": "slides/01-basics.html#breaks",
    "href": "slides/01-basics.html#breaks",
    "title": "Extension Basics",
    "section": "Breaks",
    "text": "Breaks\nFull schedule at: pos.it/quarto-extend-conf25\n\n\n\nTime\n\n\n\n\n\n10:30 - 11:00\nCoffee Break\n\n\n12:30 - 13:30\nLunch\n\n\n15:00 - 15:30\nCoffee Break\n\n\n17:00\nEND"
  },
  {
    "objectID": "slides/01-basics.html#instructors",
    "href": "slides/01-basics.html#instructors",
    "title": "Extension Basics",
    "section": "Instructors",
    "text": "Instructors\n\n\nCharlotte  \nDeveloper Educator @ Posit  Focus on Quarto\n\nMine   \nProfessor @ Duke University  Developer Educator @ Posit  Focus on Quarto, Tidyverse, and Positron"
  },
  {
    "objectID": "slides/01-basics.html#teaching-assistants",
    "href": "slides/01-basics.html#teaching-assistants",
    "title": "Extension Basics",
    "section": "Teaching Assistants",
    "text": "Teaching Assistants\n\n\nCarlos\n\nElliot"
  },
  {
    "objectID": "slides/01-basics.html#your-turn-introductions",
    "href": "slides/01-basics.html#your-turn-introductions",
    "title": "Extension Basics",
    "section": "Your turn: Introductions",
    "text": "Your turn: Introductions\n\nIntroduce yourself to your neighbor(s):\n\nName\nAffiliation\nWhat you use Quarto for\n\n\n\n  \n    −\n    +\n \n 04:00"
  },
  {
    "objectID": "slides/01-basics.html#how-to-get-help",
    "href": "slides/01-basics.html#how-to-get-help",
    "title": "Extension Basics",
    "section": "How to get help?",
    "text": "How to get help?\n\nRaise your color post-it note\n “I’m stuck and need help!”\n “I’ve finished, and ready to move on.”\nAsk in Discord\nTalk to us during breaks or your-turns"
  },
  {
    "objectID": "slides/01-basics.html#goal-reduce-repetition",
    "href": "slides/01-basics.html#goal-reduce-repetition",
    "title": "Extension Basics",
    "section": "Goal: Reduce repetition",
    "text": "Goal: Reduce repetition\nWithin documents, across documents, across projects, and across people\n\nQuarto Extensions: the mechanism for sharing across projects and people. This module\nExtending Quarto: entrypoints for customizing Quarto regardless of whether you bundle them as an extension. Most useful:\n\nPartials and templates. Next module\nFilters and shortcodes. After lunch"
  },
  {
    "objectID": "slides/01-basics.html#section",
    "href": "slides/01-basics.html#section",
    "title": "Extension Basics",
    "section": "",
    "text": "Let’s jump in!"
  },
  {
    "objectID": "slides/01-basics.html#your-turn-install-and-explore-an-extension",
    "href": "slides/01-basics.html#your-turn-install-and-explore-an-extension",
    "title": "Extension Basics",
    "section": "Your turn: Install and explore an extension",
    "text": "Your turn: Install and explore an extension\n\n\nAdd the quarto-revealjs-clean extension to the project in 01-basics/ by running:\n\n\nTerminal\n\ncd 01-basics\nquarto add grantmcdermott/quarto-revealjs-clean@v1.3\n\nWhere did the file _extension.yml get installed?\nCompare _extension.yml and the files alongside it to those in the source on GitHub. What’s the same? What’s different?\nPreview slides.qmd. Then, edit to use the clean-revealjs format, and preview.\n\nDone? Browse https://m.canouil.dev/quarto-extensions for other extensions and explore their source.\n\n\nExercise: 01-basics/\n\n\n  \n    −\n    +\n \n 10:00"
  },
  {
    "objectID": "slides/01-basics.html#what-is-a-quarto-extension",
    "href": "slides/01-basics.html#what-is-a-quarto-extension",
    "title": "Extension Basics",
    "section": "What is a Quarto extension?",
    "text": "What is a Quarto extension?\n\n\nquarto-revealjs-clean\n└── _extensions\n        └── clean\n            ├── _extension.yml\n            └── clean.scss\n\n“Quarto extensions are directories that contain an _extensions sub-directory with one or more extensions.”\n\n\n\nhttps://quarto.org/docs/extensions/distributing.html"
  },
  {
    "objectID": "slides/01-basics.html#what-is-a-quarto-extension-1",
    "href": "slides/01-basics.html#what-is-a-quarto-extension-1",
    "title": "Extension Basics",
    "section": "What is a Quarto extension?",
    "text": "What is a Quarto extension?\n\n\n\n\n_extension.yml\n\ntitle: clean\nauthor: Grant McDermott\nversion: 1.3.0\nquarto-required: \"&gt;=1.3.0\"\ncontributes:\n  formats:\n    revealjs:\n      theme: [default, clean.scss]\n      menu:\n        side: left\n      slide-number: true\n      date-format: long\n\n\n“Each extension is defined by its _extension.yml file which contains the metadata about the extension as well as the what items it contributes when used.”\n\nPossible contributes: formats, project, metadata, brand, shortcodes, filters, revealjs-plugins\n\n\nhttps://quarto.org/docs/extensions/distributing.html"
  },
  {
    "objectID": "slides/01-basics.html#custom-formats",
    "href": "slides/01-basics.html#custom-formats",
    "title": "Extension Basics",
    "section": "Custom formats",
    "text": "Custom formats\nquarto-revealjs-clean is an example of a custom format extension.\nA way to share Quarto options:\n\n\n_extensions/myformat/_extension.yml\n\ncontributes:\n  formats:\n    html: \n      toc: true\n      code-fold: true\n      theme: flatly\n\nUser needs to specify format: myformat-html in their document or _quarto.yml."
  },
  {
    "objectID": "slides/01-basics.html#custom-formats-1",
    "href": "slides/01-basics.html#custom-formats-1",
    "title": "Extension Basics",
    "section": "Custom formats",
    "text": "Custom formats\nCombine with other resources, for highly customized outputs:\n\n\n_extensions/myformat/_extension.yml\n\ncontributes:\n  formats:\n    html: \n      theme: [flatly, theme.scss]\n      include-in-header:\n        - file: analytics.html\n      partials:\n        - title-block.html\n      filters:\n        - details.lua"
  },
  {
    "objectID": "slides/01-basics.html#your-turn-create-a-custom-format",
    "href": "slides/01-basics.html#your-turn-create-a-custom-format",
    "title": "Extension Basics",
    "section": "Your turn: Create a custom format",
    "text": "Your turn: Create a custom format\n\nStill in 01-basics/:\n\nEdit _extension.yml to add a custom html format that sets 2-3 of your favorite HTML options.\nEdit slides.qmd to use your custom format, and preview.\n\n\n\nExercise: 01-basics/\n\n\n  \n    −\n    +\n \n 08:00"
  },
  {
    "objectID": "slides/01-basics.html#get-boilerplate-with-quarto-create-extension",
    "href": "slides/01-basics.html#get-boilerplate-with-quarto-create-extension",
    "title": "Extension Basics",
    "section": "Get boilerplate with quarto create extension",
    "text": "Get boilerplate with quarto create extension\n\n\nTerminal\n\nquarto create extension\n\n\n\nhttps://quarto.org/docs/extensions/creating.html"
  },
  {
    "objectID": "slides/01-basics.html#what-happens-when-you-render",
    "href": "slides/01-basics.html#what-happens-when-you-render",
    "title": "Extension Basics",
    "section": "What happens when you render?",
    "text": "What happens when you render?\n\n\nTwo main steps:\n\nComputational engine (e.g. knitr, jupyter) executes code cells. Intermediate markdown. Not this workshop\nUse pandoc to convert the markdown to the desired output format.\n\nAction for types of extensions we’ll focus on today happens in the Pandoc step.\nComputation step: not this workshop"
  },
  {
    "objectID": "slides/01-basics.html#inside-the-pandoc-step",
    "href": "slides/01-basics.html#inside-the-pandoc-step",
    "title": "Extension Basics",
    "section": "Inside the Pandoc step",
    "text": "Inside the Pandoc step"
  },
  {
    "objectID": "slides/01-basics.html#md-reader-ast",
    "href": "slides/01-basics.html#md-reader-ast",
    "title": "Extension Basics",
    "section": ".md → Reader → AST",
    "text": ".md → Reader → AST\n\n\n\n\nexample.md\n\n## Introduction\n\nIn @sec-data\n\n## Data {#sec-data}\n\n\n\n\n\n\nMarkdown is parsed into a representation called the Abstract Syntax Tree (AST)"
  },
  {
    "objectID": "slides/01-basics.html#ast-filters-ast",
    "href": "slides/01-basics.html#ast-filters-ast",
    "title": "Extension Basics",
    "section": "AST → Filters → AST",
    "text": "AST → Filters → AST\n\n\n\n\n\n\n\n\n\n\nFilters transform nodes in the AST\nE.g. cross-references (Quarto), citations (Pandoc), and custom filters (extensions & you)."
  },
  {
    "objectID": "slides/01-basics.html#ast-writer-.html",
    "href": "slides/01-basics.html#ast-writer-.html",
    "title": "Extension Basics",
    "section": "AST → Writer → .html",
    "text": "AST → Writer → .html\n\n\n\n\n\n\n\n&lt;section id=\"introduction\" class=\"level2\"&gt;\n&lt;h2 class=\"anchored\" data-anchor-id=\"introduction\"&gt;Introduction&lt;/h2&gt;\n&lt;p&gt;In &lt;a href=\"#sec-data\" class=\"quarto-xref\"&gt;Section&nbsp;2&lt;/a&gt;&lt;/p&gt;\n&lt;/section&gt;\n&lt;section id=\"sec-data\" class=\"level2\"&gt;\n&lt;h2 class=\"anchored\" data-anchor-id=\"sec-data\"&gt;Data&lt;/h2&gt;\n&lt;/section&gt;\n\n\nWriters convert the content to the desired output format."
  },
  {
    "objectID": "slides/01-basics.html#ast-writer-.html-1",
    "href": "slides/01-basics.html#ast-writer-.html-1",
    "title": "Extension Basics",
    "section": "AST → Writer → .html",
    "text": "AST → Writer → .html\n\n\n\n\n\nCombined with boilerplate from template and partials.\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\"&gt;&lt;head&gt;\n...\n&lt;section id=\"introduction\" class=\"level2\"&gt;\n&lt;h2 class=\"anchored\" data-anchor-id=\"introduction\"&gt;Introduction&lt;/h2&gt;\n&lt;p&gt;In &lt;a href=\"#sec-data\" class=\"quarto-xref\"&gt;Section&nbsp;2&lt;/a&gt;&lt;/p&gt;\n&lt;/section&gt;\n&lt;section id=\"sec-data\" class=\"level2\"&gt;\n&lt;h2 class=\"anchored\" data-anchor-id=\"sec-data\"&gt;Data&lt;/h2&gt;\n&lt;/section&gt;\n...\n&lt;/html&gt;"
  },
  {
    "objectID": "slides/01-basics.html#a-case-study-course-notes",
    "href": "slides/01-basics.html#a-case-study-course-notes",
    "title": "Extension Basics",
    "section": "A case study: Course notes",
    "text": "A case study: Course notes\nNotes that we want as slides (format: revealjs) and a document (format: html).\n\n\n\n\nTitle slide in every slide deck controlled by metadata\n\n\n\nPartial\n\n\n\n\n\nSpecial slide combines boilerplate with content.\n\n\n\nFilter"
  }
]