---
title: Filters and Shortcodes
format: revealjs
---

# What are filters?

## What are filters?

![](images/pandoc-step.jpg){width=75%}

Filters manipulate the AST between the parsing and the writing phase. First, understand the AST.

::: aside

<https://pandoc.org/lua-filters.html>

:::

## [AST: A document is composed of `Blocks`]{.small}

::: {.columns}
::: {.column width="45%"}
```{.markdown .wrap filename="example.qmd"}
{{< include _ast-diagrams/ast-1.qmd >}}
```
:::
::: {.column width="55%"}
![](images/ast-1-blocks.png){.fragment}
:::
:::

:::{.notes}
Dive into the AST in increasing level of detail.

A document is composed of a series of blocks.

In the AST diagram, blocks stack vertically. 

At the top-level this document has a `Para` block followed by a `Div` block.

Some blocks can contain other blocks, like this `Div` contains two `Para` blocks. 


:::

## [AST: Some `Blocks` contain other `Blocks`]{.small}

::: {.columns}
::: {.column width="45%"}
```{.markdown .wrap filename="example.qmd"}
{{< include _ast-diagrams/ast-1.qmd >}}
```
:::
::: {.column width="55%"}
![](images/ast-1-blocks-highlight.png){}
:::
:::

## [AST: Some `Blocks` contain `Inlines`]{.small}

::: {.columns}
::: {.column  width="45%"}
```{.markdown .wrap filename="example.qmd"}
I **really** like bold and *really* like italics, and *really **really*** can't decide which to use.

...
```
:::
::: {.column  width="55%"}
![](images/ast-1-inlines-para-1.png){}
:::
:::

:::{.notes}
Blocks can also contain `Inlines`. 

In the AST diagram, inlines flow horizontally.

This first `Para` block contains a series of `Inline` elements.

The most basic are `Str` and `Space`. 

Inlines can also contain other inlines.
E.g. a `Strong` that contains a single `Str`, an `Emph` that contains a `Str`, `Space` and `Strong`.

`Str` and `Space` can't contain anything else, so are often collapsed in diagrams. 
:::

## [AST: Diagrams might collapse `Str` and `Space`]{.small}

::: {.columns}
::: {.column  width="45%"}
```{.markdown .wrap filename="example.qmd"}
{{< include _ast-diagrams/ast-1.qmd >}}
```
:::
::: {.column  width="55%"}
![](images/ast-1-inlines.png){}
:::
:::

:::{.notes}
Why is this useful? 

1. To offer new output formats, Pandoc just needs a writer that converts the AST to that format.

2. We can describe transformations of the document in a format independent way.

:::

## [A filter function transforms a type of node]{.small}

E.g. A `Strong` filter function

::: {.r-stack}
![](images/filter-input.jpg){.fragment}

![](images/filter-input-output.jpg){.fragment}

:::


::: {.columns}
::: {.column width="47%"}
::: {.r-stack}
![](images/ast-1-para-1.png){.fragment}

![](images/ast-1-para-1-strong.jpg){.fragment}
:::
:::
::: {.column width="5%"}
[â†’]{.fragment}
:::
::: {.column  width="48%"}
::: {.r-stack}
![](images/ast-2-para-1.png){.fragment}

![](images/ast-2-para-1-strong.jpg){.fragment}
:::
:::
::: 



:::{.notes}
A function called on every instance of that type of node

The input to the function is the node itself

The output of the function replaces the node
::: 


## [Output: a single node of the same kind]{.small}

E.g. A single `Inline`. Node is replaced.

![](images/filter-input-output.jpg)

![](images/ast-2-para-1.png)


## [Output: an array of nodes of the same kind]{.small}

E.g. An array of `Inline`, a.k.a an `Inlines`. Spliced in.

![](images/filter-output-array.jpg){.r-stretch}

![](images/ast-1-array.png)

## [Output: an empty array]{.small}

Node is removed

![](images/filter-output-empty.jpg){.r-stretch}

![](images/ast-1-empty.png)


## [Output: `nil`]{.small}

Node is unchanged

![](images/filter-output-nil.jpg){.r-stretch}

![](images/ast-1-nil.png)

## AST and filter review

* A document is an array of `Block` elements
* Some `Block` elements contain other `Block` elements
* Some `Block` elements contain `Inline` elements
* Some `Inline` elements contain other `Inline` elements 

A filter function is called on every instance of a particular type of node.

The input is the node itself, the output replaces the node.

## Your turn: AST {.smaller}

::: your-turn
Take a look at the AST diagram on the next slide. 

*   What are some other types of `Block` nodes?

*   What are some other types of `Inline` nodes?

*   If we wrote a filter for `Para`, how many times would it be called?

*   If we wrote a filter for `Str`, which of the following would be affected?
    
    * The text `Filter` in the title
    * The text `Introduction` in the heading
    * The text `Lua` in the link text 
    * The text `lua-filters` in the link URL
    * the text `quarto` in the code block
:::

{{< countdown "6:00" >}}

::: exercise-folder

[Exercise](https://github.com/posit-conf-2025/quarto-extend-exercises): `03-filters/your-turns/1-explore-ast`

:::

## AST

[View Full Screen](_ast-diagrams/your-turn-1-ast.html){target="_blank"}

```{=html}
<iframe src="_ast-diagrams/your-turn-1-ast.html" class = "ast-diagram"></iframe>
```

## Solution 

* Other `Block` nodes: `Header`, `BulletList`, `CodeBlock`, `Meta` is special. 

* Other `Inline` nodes: `Link`, `Image`, `Code`

* A filter function for `Para` would be called four times.

* Affected by a `Str` filter function?
    * The text `Filter` in the title **Yes**
    * The text `Introduction` in the heading. **Yes**
    * The text `Lua` in the link text. **Yes**
    * The test `lua-filters` in the link URL. **No**
    * The text `quarto` in the code block. **No** 

## Problems solved with filters

* Remove `# fmt: skip` comments from code cells. [Discussion](https://github.com/quarto-dev/quarto-cli/discussions/13335)

* Number all callouts. [Discussion](https://github.com/quarto-dev/quarto-cli/discussions/10240)

* Put the contents of an SVG image in a raw HTML block rather than using `<img>`. [Discussion](https://github.com/quarto-dev/quarto-cli/discussions/13251)

* Display the language on every code cell. [Discussion](https://github.com/quarto-dev/quarto-cli/discussions/10400)

* Collect all code chunks and display in a code appendix. [Discussion](https://github.com/quarto-dev/quarto-cli/discussions/12498)

# Writing filters

## Writing filters

Filters are written in the programming language [Lua](https://www.lua.org/).

A **filter** is a Lua file that contains one or more filter functions.

A **filter function** is a function whose name is a type of node.

## A filter function on `Strong` nodes

::: {.columns}
::: {.column}
Define a function named `Strong`:

```{.lua filename="no-change.lua"}
Strong = function(el)
  return nil
end
```   
:::
::: {.column  .fragment}
To use the filter, specify it in the document header:

```{.yaml filename="example.qmd"}
---
title: "Filter Basics"
filters:
  - no-change.lua
---
```
:::
:::

[A filter function that returns `nil`, leaves the node unchanged.]{.fragment}

::: example-folder

[Example](https://github.com/posit-conf-2025/quarto-extend-exercises): `03-filters/examples/1-writing-filters`

:::

## Live Code: "Print" debugging 

::: {.columns}
::: {.column}
```{.lua filename="no-change.lua" code-line-numbers="2,3"}
Strong = function(el)
  quarto.log.output("Here!")
  quarto.log.output(el)
  return nil
end
```

`quarto.log.output()`: Positron/VS Code look in Terminal, RStudio look in Background Jobs.

:::
::: {.column}
*  `Strong` filter function is called twice.
* `el` is an [`Strong`](https://pandoc.org/lua-filters.html#type-strong) object, an example of an `Inline`. 
* `el` contains a `content` field which is an `Inlines`.
:::
::: 


## [Live Code: Replace bold text with italic text]{.small}

::: {.columns}
::: {.column}
```{.lua filename="replace-strong.lua"}
Strong = function(el)
  return pandoc.Emph(el.content)
end
```   
:::
::: {.column}
* [`pandoc.Emph()`](https://pandoc.org/lua-filters.html#pandoc.Strong) creates a `Emph` node another example of an `Inline` node.
* `el.content` gets the `content` field from the `el` object.
:::
:::

## [Other similar types of `Inline` elements]{.small}

See [Pandoc Lua types Quick Reference](/quick-reference.qmd#text-formatting)

```{=html}
<iframe src="/quick-reference.html#text-formatting" class="ast-diagram"></iframe>
```

## Your turn: Write a filter {.smaller}

::: your-turn

1. Write a filter, `replace-emph.lua`, that turns all italic text to underlined text.

2. Add the `Strong` filter function from `replace-strong.lua` to `replace-emph.lua`. What happens?

**Other challenges:**

* Write a filter that removes all bold and italic formatting, leaving just the text.

* Write a filter that converts all double quotes to single quotes.
:::

{{< countdown "10:00" >}}

::: exercise-folder

[Exercise](https://github.com/posit-conf-2025/quarto-extend-exercises): `03-filters/your-turns/2-write-a-filter`

:::

## Solution 

```{.lua filename="replace-emph.lua"}
Emph = function(el)
  return pandoc.Underline(el.content)
end
```  

## Solution 

```{.lua filename="remove-all.lua"}
Emph = function(el)
  return el.content
end

Strong = function(el)
  return el.content
end
```

## Solution 

```{.lua filename="replace-double-quotes.lua"}
Quoted = function(el)
  if el.quotetype == "DoubleQuote" then
    return pandoc.Quoted("SingleQuote", el.content)
  end
end
```

## Valid return values

A filter on an `Inline` must return either:

* `nil`, node is unchanged, e.g. `no-change.lua`
* an `Inline` which replaces the original, e.g. `replace-strong.lua`
* a list of `Inline` (known as an `Inlines`)  which replaces the original, spliced into its siblings.

::: {.aside}
For `Block` elements, replace `Inline` with `Block`, and `Inlines` with `Blocks`.
:::


## An `Inlines` with three elements

::: {.columns}
::: {.column}
```{.lua .wrap filename="double-strong.lua"}
Strong = function(el)
  return pandoc.Inlines({
    el, 
    pandoc.Space(), 
    el
  })
end
```  
:::
::: {.column}
> I **really** **really** like bold and *really* like italics, and *really **really** **really*** can't decide which to use.
:::
:::

::: example-folder

[Example](https://github.com/posit-conf-2025/quarto-extend-exercises): `03-filters/examples/2-return-types`

::: 

## An empty list 

::: {.columns}
::: {.column}
```{.lua filename="remove-strong.lua"}
Strong = function(el)
  return {}
end
```
:::
::: {.column}
> I like bold and *really* like italics, and *really* can't decide which to use.
:::
::: 

::: example-folder

[Example](https://github.com/posit-conf-2025/quarto-extend-exercises): `03-filters/examples/2-return-types`

::: 

## [Common mistake: an array of `Inlines`]{.small}

This won't work because `el.content` is an `Inlines` object:

```{.lua}
return pandoc.Inlines({el.content, el.content})
```

\ 

```{.default}
Error running filter /Applications/quarto/share/filters/main.lua:
Inline expected, got Inlines
```

See a useful pattern in the next section.

# Targeting specific content 

## Live Code: Targeting specific content 


::: {.columns}
::: {.column}
```{.markdown .wrap filename="target-span.qmd"}
---
title: "Filter Basics"
filters:
  - shout.lua
---

I **really** like bold and *really* like italics, and *really **really*** can't decide which to use.

[And sometimes I **really** need to shout]{.shout}
```
:::
::: {.column .fragment}
```{=html}
<iframe src="_ast-diagrams/target-span-ast.html" style="height:300px;" class = "ast-diagram"></iframe>
```
:::
::: 

::: example-folder
[Example](https://github.com/posit-conf-2025/quarto-extend-exercises): `03-filters/examples/3-target-text`
::: 

## Live Code: Smallcaps all spans with class `shout`

::: {.columns}
::: {.column width="55%"}
```{.lua filename="shout.lua"}
Span = function(el)
  if el.classes:includes("shout") then
    return pandoc.SmallCaps(el.content)
  end  
end
```
:::
::: {.column width="45%"}

* Classes are in `el.classes` (also `el.identifier` and `el.attributes`).

* `includes()` is a [method on Pandoc lists](https://pandoc.org/lua-filters.html#methods-2).

:::
::: 

::: example-folder

[Example](https://github.com/posit-conf-2025/quarto-extend-exercises): `03-filters/examples/3-target-text`

::: 

## Live Code: Constructing content

::: {.columns}
::: {.column width="55%"}
```{.lua filename="shout.lua"}
Span = function(el)
  if el.classes:includes("shout") then
    local result = pandoc.Inlines({})
    result:extend(el.content)
    result:insert(pandoc.Str("!"))
    return result
  end  
end
```
:::
::: {.column width="45%"}
A useful pattern:

* Create an empty `Inlines` object
* Use `extend()` to add `Inlines` 
* Use `insert()` to add `Inline`
:::

::: 


::: aside 

Works with `Block`/`Blocks` too.

:::

## Your turn: [Simon says](https://en.wikipedia.org/wiki/Simon_Says) {.smaller}

::: your-turn

Complete `says.lua`, a filter that:

* targets `Span` elements with class `says`, and 
* turns them into "Simon says" instructions. 

::: {.columns}
::: {.column}
E.g. source:
```{.markdown filename="Before"}
[Write a filter]{.says}
``` 
:::
::: {.column}
Becomes equivalent to:
```{.markdown filename="After"}
Simon says "Write a filter"
```
:::
:::

**Challenge:** Instead of `Simon`, let the user specify the name as an attribute, e.g. `[Write a filter]{.says name="Charlotte"}`
:::

{{< countdown "10:00" >}}

::: exercise-folder

[Exercise](https://github.com/posit-conf-2025/quarto-extend-exercises): `03-filters/your-turns/3-simon-says`

:::

## Solution

```{.lua filename="says.lua"}
Span = function(el)
  if el.classes:includes("says") then
    result = pandoc.Inlines({})
    result:insert(pandoc.Str("Simon says "))
    result:insert(pandoc.Quoted('DoubleQuote', el.content))
    return result
  end
end
```

## Solution

```{.lua filename="says.lua"}
Span = function(el)
  if not el.classes:includes("says") then    
    return nil
  end
  local name = el.attributes.name or "Simon"
  local results = pandoc.Inlines({})
  results:insert(pandoc.Str(name))
  results:insert(pandoc.Str(" says "))
  results:insert(pandoc.Quoted('DoubleQuote', el.content))
  return results
end
```

# Filters in practice

<!-- give example code/pseudo code mostly for reference -->

## Target content in a div

::: {.columns}
::: {.column width="40%"}
````{.markdown .wrap filename="target-div.qmd" code-line-numbers="|7,13"}
---
title: "Filter Basics"
filters:
  - shout.lua
---

::: {.shout}
And sometimes I **really** need to shout

```r
library(scream)
```
:::
````

:::
::: {.column width="60%"}
```{.lua filename="shout.lua"  code-line-numbers="|1,5"}
Div = function(el)
  if not el.classes:includes("shout") then
    return nil
  end
  local result = pandoc.Blocks({})
  -- Transform el, construct result
  return result 
end
```
:::
::: 


::: example-folder

[Example](https://github.com/posit-conf-2025/quarto-extend-exercises): `03-filters/examples/4-filters-in-practice/1-target-content-in-div`

:::

## [Use `walk` to apply filter functions to children]{.small} {.smaller}

::: {.columns}
::: {.column width="40%"}
````{.markdown .wrap filename="target-div.qmd"}
---
title: "Filter Basics"
filters:
  - shout.lua
---

::: {.shout}
And sometimes I **really** need to shout

```r
library(scream)
```
:::
````
:::
::: {.column width="60%"}
```{.lua filename="shout.lua"  code-line-numbers="|5-9"}
Div = function(el)
  if not el.classes:includes("shout") then
    return nil
  end
  result = el:walk({
    Str = function (el) 
      -- filter function on Str
    end
  })
  return result.content
end
```
:::
::: 

::: example-folder

[Example](https://github.com/posit-conf-2025/quarto-extend-exercises): `03-filters/examples/4-filters-in-practice/2-walk-children-nodes`

:::

::: aside

<https://pandoc.org/lua-filters.html#type-pandoc:walk>

:::


## Construct format specific output

::: {.columns}
::: {.column width="40%"}
````{.markdown .wrap filename="example.qmd"}
---
title: "Format-Specific Output"
format: pdf
filters:
  - shout.lua
---

::: {.shout}
And sometimes I **really** need to shout

```r
library(scream)
```
:::
````
:::
::: {.column width="60%"}
```{.lua filename="shout.lua" code-line-numbers="|6,8"}
Div = function(el)
  if not el.classes:includes("shout") then
    return nil
  end

  if quarto.format.is_latex_output() then
    local result = pandoc.Blocks({})
    -- use `pandoc.RawBlock('latex', )`
    return result
  end
  
end
```
:::
::: 


::: example-folder

[Example](https://github.com/posit-conf-2025/quarto-extend-exercises): `03-filters/examples/4-filters-in-practice/3-format-specific-output`

:::

## [Filter function on `Meta` to examine metadata]{.small} {.smaller}

::: {.columns}
::: {.column }
```{.markdown .wrap filename="article.qmd"}
---
author:
  - name: Mine Ã‡etinkaya-Rundel
    orcid: 0000-0001-6452-2420
    email: mine@posit.co
    affiliations:
      - name: Duke University
      - name: Posit, PBC
  - name: Charlotte Wickham
    orcid: 0000-0002-6365-5499
    email: charlotte.wickham@posit.co
    affiliation:
      - name: Posit, PBC
---
```
:::
::: {.column}
```{.lua filename="meta.lua"}
Meta = function(meta)
  quarto.log.output(meta)
end
```
:::
::: 


::: example-folder

[Example](https://github.com/posit-conf-2025/quarto-extend-exercises): `03-filters/examples/4-filters-in-practice/4-meta-filter`

:::

## [Controlling the order of filter functions]{.small}

::: {.columns}
::: {.column}
Filter functions in the same filter are run in a [specific order](https://pandoc.org/lua-filters.html#typewise-traversal): `Inline` elements, `Inlines()`, `Block` elements, 
`Blocks()`,  `Meta()`, `Pandoc()`.

Specify a different order by returning an array of **filter sets**.

:::
::: {.column}
```{.lua filename="meta.lua" code-line-numbers="|4-6,9-11|2,3,7,8,12,13"}
local string_out = ""
return {
  { -- this set is run first
    Meta = function (meta)
      -- store `string_out`
    end
  },
  { -- this set is run second
    Div = function(el)
      -- use `string_out`
    end
  }
}
```
:::
::: 


::: example-folder

[Example](https://github.com/posit-conf-2025/quarto-extend-exercises): `03-filters/examples/4-filters-in-practice/5-filter-sets`

:::

## Controlling when a filter runs

::: {.columns}
::: {.column}
Quarto's internal filters are grouped and run in sequence: `ast`, `quarto`, `render`.

By default, custom filters are run `pre-quarto`. 

You might need to run a filter later, e.g. after quarto has processed cross-references.
:::
::: {.column}
You can specify with `at` e.g:

```{.yaml filename="example.qmd"}
filters:
  - at: post-quarto
    path: shout.lua
```

Also `pre-ast`, `post-ast`, `pre-render`, `post-render`
:::
::: 

::: aside

Filter sequence in source: 
<https://github.com/quarto-dev/quarto-cli/blob/main/src/resources/filters/main.lua>

:::

# Wrapping Up

## Filter extensions {.smaller}

`quarto create extension filter` creates boilerplate. Drop your `.lua` files in. 

::: {.columns}
::: {.column}
```{.default filename="shout/"}
â”œâ”€â”€ README.md
â”œâ”€â”€ _extensions
â”‚   â””â”€â”€ shout
â”‚       â”œâ”€â”€ _extension.yml
â”‚       â””â”€â”€ shout.lua
â””â”€â”€ example.qmd
```
:::
::: {.column}
```{.yaml filename="_extension.yml"}
title: Shout
author: Charlotte Wickham
version: 1.0.0
quarto-required: ">=1.7.0"
contributes:
  filters:
    - shout.lua
```
:::
::: 


Users must opt-in to extension under `filters`:

```{.markdown .wrap filename="example.qmd"}
---
filters:
  - shout
---
```


::: aside

<https://quarto.org/docs/extensions/filters.html#filter-extensions>

:::

## Filters in custom format extensions

::: {.columns}
::: {.column}
```{.default filename="shouty/"}
â”œâ”€â”€ README.md
â”œâ”€â”€ _extensions
â”‚   â””â”€â”€ shouty
â”‚       â”œâ”€â”€ _extension.yml
â”‚       â””â”€â”€ shout.lua
â””â”€â”€ template.qmd
```
:::
::: {.column}
```{.yaml filename="_extension.yml"}
title: Shouty
author: Charlotte Wickham
version: 1.0.0
quarto-required: ">=1.7.0"
contributes:
  formats:
    html:
      filters:
        - shout.lua
```
:::
::: 

Users specify `format: shouty-html`, and get filter applied automatically.

## Shortcodes

Lua functions that insert their output into the AST.

::: {.columns}
::: {.column}
````{.markdown .wrap filename="hello.qmd" shortcodes="false"}
---
shortcodes:
  - hello.lua
---

{{< hello >}}

````
:::
::: {.column}
```{.lua filename="hello.lua"}
hello = function ()
  return pandoc.Str("Hi there!")
end
```
:::
::: 

Can take arguments: `args`, `kwargs`, `meta`, `raw_args`, `context`

::: aside

<https://quarto.org/docs/extensions/shortcodes.html>

:::

## Learning Lua

<https://quarto.org/docs/extensions/lua.html#learning-lua>

```{=html}
<iframe src="https://quarto.org/docs/extensions/lua.html#learning-lua" class = "ast-diagram" style="height: 350px"></iframe>
```

I also quite liked: <https://ebens.me/posts/lua-for-programmers-part-1/>

# Questions? {.r-fit-text .center}

## 

::: {.callout-caution}

## AST diagrams are WIP

The AST diagrams you've seen are produced using Pandoc's version of markdown.

Quarto specific features won't appear in the AST diagrams as you might expect. E.g. cross-references, executable code blocks (ones with `{`), shortcodes, callouts, etc..

Use `quarto.log.output()` to examine the AST as it is when your filter is run.

This will improve!
:::
