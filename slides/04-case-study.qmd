---
title: Case study
format: revealjs
code-block-height: 1200px
---

## A case study: Course notes

Notes that we want as slides (`format: revealjs`) and a document (`format: html`).

::: {.columns}
::: {.column}
::: {.r-stack}
::: {}
Title slide in every slide deck controlled by metadata

![](images/title-slide-coursenotes.png){.box}
:::
::: {.rotated-text .marker .fragment data-fragment-index="3"}
Partial
:::
:::
:::


::: {.column}
::: {.r-stack}
::: {}
Special slide combines boilerplate with content.

![](images/course-notes-slide.png){.box}
:::
::: {.rotated-text .marker .fragment data-fragment-index="4"}
Filter
:::
:::
:::
::: 

# Your turn 1

## Your turn: Add a filter {.smaller}

::: your-turn

::: {.columns}
::: {.column}
Write the `participate.lua` filter to combine the content of the question in the div with class `.participate` with boilerplate text: 

```markdown
Answer in our Discord!
```
:::

::: {.column}
Your slide should look like this:

![](images/example-slide.png){.box height="200px"}
:::
::: 

Hints:

* Recall the useful pattern: create an empty `pandoc.Blocks()`, `insert` `Block`s, `extend` with `Blocks`.
* You can pass `pandoc.Str()` a string with spaces. 
:::

::: exercise-folder

[Exercise](https://github.com/posit-conf-2025/quarto-extend-exercises): `04-case-study/your-turns/1-add-filter`

:::

{{< countdown 8:00 >}}

# Your turn 2

## Your turn: Predict the output {.smaller}

::: your-turn
Take a look at the version of `participate.lua` on the next slide.

With your neighbor, predict what the "Participate" slide will look like.
:::

{{< countdown 5:00 >}}

## `participate.lua` {.scrollable}

::: your-turn
[Full Screen](/resources/participate.qmd){target="_blank"}

```{.lua filename="participate.lua"}
{{< include /resources/participate.lua >}}
```
:::

## `participate.lua` {visibility="hidden"}

![](images/example-complex.png)

## `participate.lua`  {visibility="hidden"}

* Adds `question` class to div containing question, so it can be styled
* `format: html` just shows content
* Boilerplate includes a link and image
* Link URL pulled from metadata
* Creates a two column layout

# Your turn 3

## Your turn: Now add a partial!

::: your-turn
Take what you developed so far in this module and add your `title-slide.html` partial and `slides.scss` theme from earlier.
:::

# Wrap-up

## Bring it all together

::: example-folder

[Example](https://github.com/posit-conf-2025/quarto-extend-exercises): `04-case-study/example`

:::

## Bring it all together... 

as an extension!

::: example-folder

[Example](https://github.com/posit-conf-2025/quarto-extend-exercises): `04-case-study/coursenotes`

:::

## Reusable components {.smaller}

::: incremental

- `{{{< include >}}}`s are a convenient way to reuse content across documents
  - The _same_ content
  - Basically copy-paste

- `template-partial`s are a way to create reusable components
  - The _same_ structure, but different content
  - Copy-paste with substitutions from meta-data fields

- Shortcodes are like copy-paste with substitutions in the body of your document

- `filter`s are a way to modify content
  - The _same_ structure, but different content
  - Operating on the document content

- `_extensions` are combinations of `partial`s and `filter`s, and possibly other things, that are designed for portability and reusability

:::

## Workshop survey

Before we move on to Q&A, please take a note of the workshop survey:

<br>

::: large

{{< iconify ri survey-line >}} [pos.it/conf-workshop-survey](http://pos.it/conf-workshop-survey)

:::

## Questions?

Any questions, but especially of the kind:

- How can I solve `_`[my problem]{.handwriting}`_` with a filter, partial, etc.?

- Do I need a filter or partial or something else for solving `_`[my problem]{.handwriting}`_`?
