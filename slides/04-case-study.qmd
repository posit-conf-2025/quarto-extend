---
title: Case study
format: revealjs
code-block-height: 1200px
---

# Exercise 1

## Your Turn: Add a filter {.smaller}

::: your-turn

::: {.columns}
::: {.column}
Write the `participate.lua` filter to combine the content of the question in the div with class `.participate` with boilerplate text: 

```markdown
Answer in our Discord!
```
:::

::: {.column}
Your slide should look like this:

![](images/example-slide.png){.box height="200px"}
:::
::: 

Hints:

* Recall the useful pattern: create an empty `pandoc.Blocks()`, `insert` `Block`s, `extend` with `Blocks`.
* You can pass `pandoc.Str()` a string with spaces. 
:::

::: exercise-folder

[Exercise](https://github.com/posit-conf-2025/quarto-extend-exercises): `04-case-study/your-turns/1-add-filter`

:::

{{< countdown 8:00 >}}

## Your turn: Predict the output {.smaller}

::: your-turn
Take a look at the version of `participate.lua` on the next slide.

With your neighbor, predict what the "Participate" slide will look like.
:::

{{< countdown 5:00 >}}

## `participate.lua` {.scrollable}

::: your-turn
[Full Screen](/resources/participate.qmd){target="_blank"}

```{.lua filename="participate.lua"}
{{< include /resources/participate.lua >}}
```
:::

## `participate.lua` {visibility="hidden"}

![](images/example-complex.png)

## `participate.lua`  {visibility="hidden"}

* Adds `question` class to div containing question, so it can be styled
* `format: html` just shows content
* Boilerplate includes a link and image
* Link URL pulled from metadata
* Creates a two column layout

# Exercise 2

## Your turn: Now add a partial!

::: your-turn
Add a partial that updated your title slide.

- This could be _the_ partial from Module 2

- It could be a new partial you develop during the time allotted
:::

# Wrap up

## Includes vs. partials {.smaller}

- `{{{< include >}}}`s are a convenient way to reuse content across documents
  - The _same_ content
  - Basically copy-paste

- `partial`s are a way to create reusable components
  - The _same_ structure, but different content
  - Copy-paste with substitutions from meta-data fields

- Shortcode is like copy-paste with substitutions in the body of your document

- `filter`s are a way to modify content
  - The _same_ structure, but different content
  - Operating on the document content

- Any combinations of `partial`s and `filter`s, and possibly other things, that are designed for reusability

## Filters vs. extensions

- One off use

- Reusable, for multiple people or multiple projects

## 

[TO DO: Say anything about filters for changing document content?]

## Invitation for questions

how do I solve X with?

